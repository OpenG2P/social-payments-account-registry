{
  "openapi": "3.1.0",
  "info": {
    "title": "Social Payments Account Registry",
    "description": "\n    This module gives selfservice portal and additional functionalities to an ID Account Mapper, like G2P Connect.\n\n    ***********************************\n    Further details goes here\n    ***********************************\n    ",
    "contact": {
      "url": "https://www.openg2p.org/",
      "email": "info@openg2p.org"
    },
    "license": {
      "name": "Mozilla Public License 2.0",
      "url": "https://www.mozilla.org/en-US/MPL/2.0/"
    },
    "version": "0.1.0"
  },
  "paths": {
    "/dfsp/getLevels": {
      "get": {
        "tags": [
          "dfsp"
        ],
        "summary": "Get Dfsp Level",
        "description": "Get Levels that can be supplied to Update FA Request. Or to be shown on UI.\n- Authentication required.\n- A combination of the query parameters can be used.",
        "operationId": "get_dfsp_level_dfsp_getLevels_get",
        "security": [
          {
            "JwtBearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter for levels with this ID",
              "title": "Id"
            },
            "description": "Filter for levels with this ID"
          },
          {
            "name": "code",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter for level with this code.",
              "title": "Code"
            },
            "description": "Filter for level with this code."
          },
          {
            "name": "level",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter for levels with this level number",
              "title": "Level"
            },
            "description": "Filter for levels with this level number"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DfspLevelHttpResponse"
                }
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorListResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorListResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorListResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorListResponse"
                }
              }
            },
            "description": "Internal Server Error"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/dfsp/getLevelValues": {
      "get": {
        "tags": [
          "dfsp"
        ],
        "summary": "Get Dfsp Level Values",
        "description": "Get Level Values that can be supplied to each particular level in the Update FA Request.\nOr to be shown on UI.\n- Authentication required.\n- A combination of the query parameters can be used.",
        "operationId": "get_dfsp_level_values_dfsp_getLevelValues_get",
        "security": [
          {
            "JwtBearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter for level Values with this ID.",
              "title": "Id"
            },
            "description": "Filter for level Values with this ID."
          },
          {
            "name": "code",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter for level Values with this code.",
              "title": "Code"
            },
            "description": "Filter for level Values with this code."
          },
          {
            "name": "levelId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter for level values whose level's ID is this.",
              "title": "Levelid"
            },
            "description": "Filter for level values whose level's ID is this."
          },
          {
            "name": "parentId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter for level values whose parent Level value's ID is this.",
              "title": "Parentid"
            },
            "description": "Filter for level values whose parent Level value's ID is this."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DfspLevelValuesHttpResponse"
                }
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorListResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorListResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorListResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorListResponse"
                }
              }
            },
            "description": "Internal Server Error"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/selfservice/getFaRequest": {
      "post": {
        "tags": [
          "selfservice"
        ],
        "summary": "Get Fa Request",
        "description": "Make a request to get the Financial Address(FA) of the authenticated user.\n- Will receive a txn_id, which can be used to query for status.",
        "operationId": "get_fa_request_selfservice_getFaRequest_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTxnStatus"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorListResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorListResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorListResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorListResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "JwtBearerAuth": []
          }
        ]
      }
    },
    "/selfservice/getFaRequestStatus/{txn_id}": {
      "get": {
        "tags": [
          "selfservice"
        ],
        "summary": "Get Fa Request Status",
        "description": "Get status of a getFaRequest against the given txn_id, along with FA if success.\n\nErrors:\n- Code: G2P-SPR-452. HTTP: 400. Message: Invalid txn_id given for get. Or the user is not allowed\n  to access the txn_id.\n- Code: G2P-SPR-453. HTTP: 400. Message: Cannot deconstruct the FA using any available strategy.",
        "operationId": "get_fa_request_status_selfservice_getFaRequestStatus__txn_id__get",
        "security": [
          {
            "JwtBearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "txn_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Txn Id"
            }
          },
          {
            "name": "deconstruct",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "default": false,
              "title": "Deconstruct"
            }
          },
          {
            "name": "deconstructCodes",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "default": true,
              "title": "Deconstructcodes"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTxnStatus"
                }
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorListResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorListResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorListResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorListResponse"
                }
              }
            },
            "description": "Internal Server Error"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/selfservice/updateFaRequest": {
      "post": {
        "tags": [
          "selfservice"
        ],
        "summary": "Update Fa Request",
        "description": "Make a request to update/link new FA for the authenticated user.\n- A txn_id is returned, which can be used to query for status.\n- If the user is linking their FA for the first time, the link parameter can be set.\n  To check whether their FA is already linked, users can make a getFaRequest.\n- Request Json should contain level_values array, which a key value pair list.\n- Each \"key\" should be a valid DfspLevel's code. Use /dfsp/getLevels to get valid levels list.\n- Each \"value\" should be either a valid DfspLevelValue's code value, or regular string\n  depending on the DfspLevel. Use /dfsp/getLevelValues to get valid values list.\n\nErrors:\n- Code: G2P-SPR-452. HTTP: 400. Message: Invalid value for the given\n  code. &lt;Reason&gt;. &lt;Level Code&gt;.\n\nInternal Errors:\n- Code: G2P-SPR-450. HTTP: 500. Message: Invalid configuration of id providers and login provider.\n- Code: G2P-SPR-451. HTTP: 500. Message: Invalid configuration of dfsp providers.",
        "operationId": "update_fa_request_selfservice_updateFaRequest_post",
        "security": [
          {
            "JwtBearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "link",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Link"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FaUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateTxnStatus"
                }
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorListResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorListResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorListResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorListResponse"
                }
              }
            },
            "description": "Internal Server Error"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/selfservice/updateFaRequestStatus/{txn_id}": {
      "get": {
        "tags": [
          "selfservice"
        ],
        "summary": "Update Fa Request Status",
        "description": "Get status of a updateFaRequest against the given txn_id.\n- If the updateFaRequest is a link request (i.e., the link param is set), then it will have to\n  be set here also. Or G2P-SPR-452 error will be thrown.\n- If the updateFaRequest is a link request even if the user has once already linked their FA,\n  the status will be rejected (rjct). Vice-versa is also rejected.\n\nErrors:\n- Code: G2P-SPR-452. HTTP: 400. Message: Invalid txn_id given for update/link. Or the user\n  is not allowed to access the txn_id.",
        "operationId": "update_fa_request_status_selfservice_updateFaRequestStatus__txn_id__get",
        "security": [
          {
            "JwtBearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "txn_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Txn Id"
            }
          },
          {
            "name": "link",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Link"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateTxnStatus"
                }
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorListResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorListResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorListResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorListResponse"
                }
              }
            },
            "description": "Internal Server Error"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/auth/profile": {
      "get": {
        "tags": [
          "auth"
        ],
        "summary": "Get Profile",
        "description": "Get Profile Data of the authenticated user/entity.\nThis can also be used to check whether or not the Authentication is present and valid.\n- Authentication required.\n- If online is true, the server will try to userinfo from original Authorization Server.\n  Else it will return the information present in ID Token and Access token.",
        "operationId": "get_profile_auth_profile_get",
        "security": [
          {
            "JwtBearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "online",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true,
              "title": "Online"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BasicProfile"
                }
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorListResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorListResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorListResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorListResponse"
                }
              }
            },
            "description": "Internal Server Error"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Logout",
        "description": "Perform Logout. This clears the Access Tokens and ID Tokens from cookies.\n- Authentication not mandatory.",
        "operationId": "logout_auth_logout_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorListResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorListResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorListResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/getLoginProviders": {
      "get": {
        "tags": [
          "auth"
        ],
        "summary": "Get Login Providers",
        "description": "Get available Login Providers List. Can also be used to display login providers on UI.\nUse getLoginProviderRedirect API to redirect to this Login Provider to perform login.",
        "operationId": "get_login_providers_auth_getLoginProviders_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginProviderHttpResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorListResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorListResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorListResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/getLoginProviderRedirect/{id}": {
      "get": {
        "tags": [
          "auth"
        ],
        "summary": "Get Login Provider Redirect",
        "description": "Redirect URL to redirect to the Login Provider's Authorization URL\nbased on the id of login provider given.",
        "operationId": "get_login_provider_redirect_auth_getLoginProviderRedirect__id__get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Id"
            }
          },
          {
            "name": "redirect_uri",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "/",
              "title": "Redirect Uri"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorListResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorListResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorListResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorListResponse"
                }
              }
            },
            "description": "Internal Server Error"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/oauth2/callback": {
      "get": {
        "tags": [
          "oauth"
        ],
        "summary": "Oauth Callback",
        "description": "Oauth2 Redirect Url. Auth Server will redirect to this URL after the Authentication is successful.\n\nInternal Errors:\n- Code: G2P-AUT-401. HTTP: 401. Message: Login Provider Id not received.",
        "operationId": "oauth_callback_oauth2_callback_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorListResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorListResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorListResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/internal/callback/mapper/on-link": {
      "post": {
        "tags": [
          "callback"
        ],
        "summary": "Mapper On Link",
        "description": "The API that ID Mapper calls back when a ID Mapper Link Request is made.\n- Returns positive ACK (acc to G2P Connect Spec) if the txn_id is known.\n  Return negative ACK otherwise.",
        "operationId": "mapper_on_link_internal_callback_mapper_on_link_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LinkCallbackHttpRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommonResponseMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorListResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorListResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorListResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorListResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/internal/callback/mapper/on-update": {
      "post": {
        "tags": [
          "callback"
        ],
        "summary": "Mapper On Update",
        "description": "The API that ID Mapper calls back when a ID Mapper Update Request is made.\n- Returns positive ACK (acc to G2P Connect Spec) if the txn_id is known.\n  Return negative ACK otherwise.",
        "operationId": "mapper_on_update_internal_callback_mapper_on_update_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCallbackHttpRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommonResponseMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorListResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorListResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorListResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorListResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/internal/callback/mapper/on-resolve": {
      "post": {
        "tags": [
          "callback"
        ],
        "summary": "Mapper On Resolve",
        "description": "The API that ID Mapper calls back when a ID Mapper Resolve Request is made.\n- Returns positive ACK (acc to G2P Connect Spec) if the txn_id is known.\n  Return negative ACK otherwise.",
        "operationId": "mapper_on_resolve_internal_callback_mapper_on_resolve_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResolveCallbackHttpRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommonResponseMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorListResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorListResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorListResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorListResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/internal/mojaloop/participants/{type}/{id}": {
      "get": {
        "tags": [
          "mojaloop-als-oracle"
        ],
        "summary": "Get Participants",
        "description": "Mojaloop Get Participants API - Synchronous.\n- This is also Mojaloop ALS Oracle API. Making SPAR into Mojaloop Oracle.\n- This API can be used to return DFSP ID if the FA value is given. Example\n  - If FA is \"account_no:12345@abc.bank1\", then this will return \"bank1\"\n    if bank1 is the selected DFSP.\n\nErrors:\n- Code: ML-SPR-100. HTTP: 400. Message: Given type is not supported by this oracle.\n- Code: ML-SPR-200. HTTP: 400. Message: Given Type and ID combination is invalid or not found in this oracle.\n- Code: ML-SPR-300. HTTP: 400. Message: FinancialAddress response is not recognisable by this oracle or by Mojaloop.",
        "operationId": "get_participants_internal_mojaloop_participants__type___id__get",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Type"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParticipantsTypeIDGetResponse"
                }
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorListResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorListResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorListResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorListResponse"
                }
              }
            },
            "description": "Internal Server Error"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/ping": {
      "get": {
        "tags": [
          "ping"
        ],
        "summary": "Get Ping",
        "description": "Returns \"pong\" always, if the service is healthy.\nThis can also used for service health checks.",
        "operationId": "get_ping_ping_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorListResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorListResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorListResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorListResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AccountProviderInfo": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "code": {
            "type": "string",
            "title": "Code"
          },
          "subcode": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Subcode",
            "default": ""
          },
          "additional_info": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Additional Info",
            "default": ""
          }
        },
        "type": "object",
        "required": [
          "name",
          "code"
        ],
        "title": "AccountProviderInfo"
      },
      "Ack": {
        "type": "string",
        "enum": [
          "ACK",
          "NACK",
          "ERR"
        ],
        "title": "Ack"
      },
      "AdditionalInfo": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "value": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "type": "boolean"
              },
              {
                "type": "object"
              }
            ],
            "title": "Value"
          }
        },
        "type": "object",
        "required": [
          "name",
          "value"
        ],
        "title": "AdditionalInfo"
      },
      "BasicProfile": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "sub": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sub"
          },
          "iss": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Iss"
          },
          "exp": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Exp"
          },
          "picture": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Picture"
          },
          "profile": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Profile"
          },
          "email": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Email"
          },
          "gender": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Gender"
          },
          "birthdate": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Birthdate"
          },
          "address": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Address"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "title": "BasicProfile"
      },
      "CommonResponse": {
        "properties": {
          "ack_status": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Ack"
              },
              {
                "type": "null"
              }
            ]
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Timestamp"
          },
          "error": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ErrorResponse"
              },
              {
                "type": "null"
              }
            ]
          },
          "correlation_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Correlation Id"
          }
        },
        "type": "object",
        "required": [
          "timestamp"
        ],
        "title": "CommonResponse"
      },
      "CommonResponseMessage": {
        "properties": {
          "message": {
            "$ref": "#/components/schemas/CommonResponse"
          }
        },
        "type": "object",
        "required": [
          "message"
        ],
        "title": "CommonResponseMessage"
      },
      "DfspLevelHttpResponse": {
        "properties": {
          "levels": {
            "items": {
              "$ref": "#/components/schemas/DfspLevelResponse"
            },
            "type": "array",
            "title": "Levels"
          }
        },
        "type": "object",
        "required": [
          "levels"
        ],
        "title": "DfspLevelHttpResponse"
      },
      "DfspLevelResponse": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "code": {
            "type": "string",
            "title": "Code"
          },
          "level": {
            "type": "integer",
            "title": "Level"
          },
          "next_level_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Next Level Id"
          },
          "validation_regex": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Validation Regex"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "code",
          "level"
        ],
        "title": "DfspLevelResponse"
      },
      "DfspLevelValueResponse": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "code": {
            "type": "string",
            "title": "Code"
          },
          "level_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Level Id"
          },
          "next_level_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Next Level Id"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "code"
        ],
        "title": "DfspLevelValueResponse"
      },
      "DfspLevelValuesHttpResponse": {
        "properties": {
          "levelValues": {
            "items": {
              "$ref": "#/components/schemas/DfspLevelValueResponse"
            },
            "type": "array",
            "title": "Levelvalues"
          }
        },
        "type": "object",
        "required": [
          "levelValues"
        ],
        "title": "DfspLevelValuesHttpResponse"
      },
      "ErrorListResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "type": "array",
            "title": "Errors"
          }
        },
        "type": "object",
        "required": [
          "errors"
        ],
        "title": "ErrorListResponse"
      },
      "ErrorResponse": {
        "properties": {
          "code": {
            "type": "string",
            "title": "Code",
            "default": ""
          },
          "message": {
            "type": "string",
            "title": "Message",
            "default": ""
          }
        },
        "type": "object",
        "title": "ErrorResponse"
      },
      "FaUpdateRequest": {
        "properties": {
          "level_values": {
            "items": {
              "$ref": "#/components/schemas/KeyValuePair"
            },
            "type": "array",
            "title": "Level Values"
          }
        },
        "type": "object",
        "required": [
          "level_values"
        ],
        "title": "FaUpdateRequest"
      },
      "GetTxnStatus": {
        "properties": {
          "txn_id": {
            "type": "string",
            "title": "Txn Id"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "status_reason_code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Status Reason Code"
          },
          "fa": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "items": {
                  "$ref": "#/components/schemas/KeyValuePair"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Fa"
          }
        },
        "type": "object",
        "required": [
          "txn_id",
          "status"
        ],
        "title": "GetTxnStatus"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "KeyValuePair": {
        "properties": {
          "key": {
            "type": "string",
            "title": "Key"
          },
          "value": {
            "type": "string",
            "title": "Value"
          }
        },
        "type": "object",
        "required": [
          "key",
          "value"
        ],
        "title": "KeyValuePair"
      },
      "LinkCallbackHttpRequest": {
        "properties": {
          "signature": {
            "type": "string",
            "title": "Signature"
          },
          "header": {
            "$ref": "#/components/schemas/MsgCallbackHeader"
          },
          "message": {
            "$ref": "#/components/schemas/LinkCallbackRequest"
          }
        },
        "type": "object",
        "required": [
          "signature",
          "header",
          "message"
        ],
        "title": "LinkCallbackHttpRequest"
      },
      "LinkCallbackRequest": {
        "properties": {
          "transaction_id": {
            "type": "string",
            "title": "Transaction Id"
          },
          "correlation_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Correlation Id",
            "default": ""
          },
          "link_response": {
            "items": {
              "$ref": "#/components/schemas/SingleLinkCallbackRequest"
            },
            "type": "array",
            "title": "Link Response"
          }
        },
        "type": "object",
        "required": [
          "transaction_id",
          "link_response"
        ],
        "title": "LinkCallbackRequest"
      },
      "LinkRequestStatusReasonCode": {
        "type": "string",
        "enum": [
          "rjct.reference_id.invalid",
          "rjct.reference_id.duplicate",
          "rjct.timestamp.invalid",
          "rjct.id.invalid",
          "rjct.fa.invalid",
          "rjct.name.invalid",
          "rjct.mobile_number.invalid",
          "rjct.unknown.retry",
          "rjct.other.error"
        ],
        "title": "LinkRequestStatusReasonCode"
      },
      "LoginProviderHttpResponse": {
        "properties": {
          "loginProviders": {
            "items": {
              "$ref": "#/components/schemas/LoginProviderResponse"
            },
            "type": "array",
            "title": "Loginproviders"
          }
        },
        "type": "object",
        "required": [
          "loginProviders"
        ],
        "title": "LoginProviderHttpResponse"
      },
      "LoginProviderResponse": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "type": {
            "$ref": "#/components/schemas/LoginProviderTypes"
          },
          "displayName": {
            "type": "string",
            "title": "Displayname"
          },
          "displayIconUrl": {
            "type": "string",
            "title": "Displayiconurl"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "type",
          "displayName",
          "displayIconUrl"
        ],
        "title": "LoginProviderResponse"
      },
      "LoginProviderTypes": {
        "const": "oauth2_auth_code",
        "title": "LoginProviderTypes"
      },
      "MsgCallbackHeader": {
        "properties": {
          "version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Version",
            "default": "1.0.0"
          },
          "message_id": {
            "type": "string",
            "title": "Message Id"
          },
          "message_ts": {
            "type": "string",
            "format": "date-time",
            "title": "Message Ts"
          },
          "action": {
            "type": "string",
            "title": "Action"
          },
          "status": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/RequestStatusEnum"
              },
              {
                "type": "null"
              }
            ]
          },
          "status_reason_code": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/MsgHeaderStatusReasonCodeEnum"
              },
              {
                "type": "null"
              }
            ]
          },
          "status_reason_message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Status Reason Message"
          },
          "total_count": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Count",
            "default": -1
          },
          "completed_count": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Completed Count",
            "default": -1
          },
          "sender_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sender Id"
          },
          "receiver_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Receiver Id"
          },
          "is_encrypted": {
            "type": "boolean",
            "title": "Is Encrypted",
            "default": false
          },
          "meta": {
            "type": "object",
            "title": "Meta",
            "default": {}
          }
        },
        "type": "object",
        "required": [
          "message_id",
          "message_ts",
          "action"
        ],
        "title": "MsgCallbackHeader"
      },
      "MsgHeaderStatusReasonCodeEnum": {
        "type": "string",
        "enum": [
          "rjct.version.invalid",
          "rjct.message_id.duplicate",
          "rjct.message_ts.invalid",
          "rjct.action.invalid",
          "rjct.action.not_supported",
          "rjct.total_count.invalid",
          "rjct.total_count.limit_exceeded",
          "rjct.errors.too_many"
        ],
        "title": "MsgHeaderStatusReasonCodeEnum"
      },
      "ParticipantsTypeIDGetResponse": {
        "properties": {
          "partyList": {
            "items": {
              "$ref": "#/components/schemas/PartyTypeIdInfo"
            },
            "type": "array",
            "title": "Partylist"
          }
        },
        "type": "object",
        "required": [
          "partyList"
        ],
        "title": "ParticipantsTypeIDGetResponse"
      },
      "PartyTypeIdInfo": {
        "properties": {
          "fspId": {
            "type": "string",
            "title": "Fspid"
          }
        },
        "type": "object",
        "required": [
          "fspId"
        ],
        "title": "PartyTypeIdInfo"
      },
      "RequestStatusEnum": {
        "type": "string",
        "enum": [
          "rcvd",
          "pdng",
          "succ",
          "rjct"
        ],
        "title": "RequestStatusEnum"
      },
      "ResolveCallbackHttpRequest": {
        "properties": {
          "signature": {
            "type": "string",
            "title": "Signature"
          },
          "header": {
            "$ref": "#/components/schemas/MsgCallbackHeader"
          },
          "message": {
            "$ref": "#/components/schemas/ResolveCallbackRequest"
          }
        },
        "type": "object",
        "required": [
          "signature",
          "header",
          "message"
        ],
        "title": "ResolveCallbackHttpRequest"
      },
      "ResolveCallbackRequest": {
        "properties": {
          "transaction_id": {
            "type": "string",
            "title": "Transaction Id"
          },
          "correlation_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Correlation Id",
            "default": ""
          },
          "resolve_response": {
            "items": {
              "$ref": "#/components/schemas/SingleResolveCallbackRequest"
            },
            "type": "array",
            "title": "Resolve Response"
          }
        },
        "type": "object",
        "required": [
          "transaction_id",
          "resolve_response"
        ],
        "title": "ResolveCallbackRequest"
      },
      "ResolveRequestStatusReasonCode": {
        "type": "string",
        "enum": [
          "rjct.reference_id.invalid",
          "rjct.reference_id.duplicate",
          "rjct.timestamp.invalid",
          "rjct.id.invalid",
          "rjct.fa.invalid",
          "rjct.resolve_type.not_supported",
          "succ.fa.active",
          "succ.fa.inactive",
          "succ.fa.not_found",
          "succ.fa.not_linked_to_id",
          "succ.id.active",
          "succ.id.inactive",
          "succ.id.not_found"
        ],
        "title": "ResolveRequestStatusReasonCode"
      },
      "SingleLinkCallbackRequest": {
        "properties": {
          "reference_id": {
            "type": "string",
            "title": "Reference Id"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Timestamp"
          },
          "additional_info": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/AdditionalInfo"
                },
                "type": "array"
              },
              {
                "$ref": "#/components/schemas/AdditionalInfo"
              },
              {
                "type": "null"
              }
            ],
            "title": "Additional Info"
          },
          "locale": {
            "type": "string",
            "title": "Locale",
            "default": "eng"
          },
          "fa": {
            "type": "string",
            "title": "Fa"
          },
          "status": {
            "$ref": "#/components/schemas/RequestStatusEnum"
          },
          "status_reason_code": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/LinkRequestStatusReasonCode"
              },
              {
                "type": "null"
              }
            ]
          },
          "status_reason_message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Status Reason Message",
            "default": ""
          }
        },
        "type": "object",
        "required": [
          "reference_id",
          "timestamp",
          "fa",
          "status"
        ],
        "title": "SingleLinkCallbackRequest"
      },
      "SingleResolveCallbackRequest": {
        "properties": {
          "reference_id": {
            "type": "string",
            "title": "Reference Id"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Timestamp"
          },
          "additional_info": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/AdditionalInfo"
                },
                "type": "array"
              },
              {
                "$ref": "#/components/schemas/AdditionalInfo"
              },
              {
                "type": "null"
              }
            ],
            "title": "Additional Info"
          },
          "locale": {
            "type": "string",
            "title": "Locale",
            "default": "eng"
          },
          "fa": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Fa"
          },
          "id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Id"
          },
          "account_provider_info": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AccountProviderInfo"
              },
              {
                "type": "null"
              }
            ]
          },
          "status": {
            "$ref": "#/components/schemas/RequestStatusEnum"
          },
          "status_reason_code": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ResolveRequestStatusReasonCode"
              },
              {
                "type": "null"
              }
            ]
          },
          "status_reason_message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Status Reason Message",
            "default": ""
          }
        },
        "type": "object",
        "required": [
          "reference_id",
          "timestamp",
          "status"
        ],
        "title": "SingleResolveCallbackRequest"
      },
      "SingleUpdateCallbackRequest": {
        "properties": {
          "reference_id": {
            "type": "string",
            "title": "Reference Id"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Timestamp"
          },
          "additional_info": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/AdditionalInfo"
                },
                "type": "array"
              },
              {
                "$ref": "#/components/schemas/AdditionalInfo"
              },
              {
                "type": "null"
              }
            ],
            "title": "Additional Info"
          },
          "locale": {
            "type": "string",
            "title": "Locale",
            "default": "eng"
          },
          "id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Id",
            "default": ""
          },
          "status": {
            "$ref": "#/components/schemas/RequestStatusEnum"
          },
          "status_reason_code": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/UpdateRequestStatusReasonCode"
              },
              {
                "type": "null"
              }
            ]
          },
          "status_reason_message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Status Reason Message",
            "default": ""
          }
        },
        "type": "object",
        "required": [
          "reference_id",
          "timestamp",
          "status"
        ],
        "title": "SingleUpdateCallbackRequest"
      },
      "UpdateCallbackHttpRequest": {
        "properties": {
          "signature": {
            "type": "string",
            "title": "Signature"
          },
          "header": {
            "$ref": "#/components/schemas/MsgCallbackHeader"
          },
          "message": {
            "$ref": "#/components/schemas/UpdateCallbackRequest"
          }
        },
        "type": "object",
        "required": [
          "signature",
          "header",
          "message"
        ],
        "title": "UpdateCallbackHttpRequest"
      },
      "UpdateCallbackRequest": {
        "properties": {
          "transaction_id": {
            "type": "string",
            "title": "Transaction Id"
          },
          "correlation_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Correlation Id",
            "default": ""
          },
          "update_response": {
            "items": {
              "$ref": "#/components/schemas/SingleUpdateCallbackRequest"
            },
            "type": "array",
            "title": "Update Response"
          }
        },
        "type": "object",
        "required": [
          "transaction_id",
          "update_response"
        ],
        "title": "UpdateCallbackRequest"
      },
      "UpdateRequestStatusReasonCode": {
        "type": "string",
        "enum": [
          "rjct.reference_id.invalid",
          "rjct.reference_id.duplicate",
          "rjct.timestamp.invalid",
          "rjct.beneficiary_name.invalid",
          "rjct.id.invalid"
        ],
        "title": "UpdateRequestStatusReasonCode"
      },
      "UpdateTxnStatus": {
        "properties": {
          "txn_id": {
            "type": "string",
            "title": "Txn Id"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "status_reason_code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Status Reason Code"
          }
        },
        "type": "object",
        "required": [
          "txn_id",
          "status"
        ],
        "title": "UpdateTxnStatus"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      }
    },
    "securitySchemes": {
      "JwtBearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}
